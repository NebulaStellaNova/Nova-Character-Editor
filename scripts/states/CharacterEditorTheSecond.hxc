import haxe.Json;
import StringTools;
import flixel.FlxG;
import flixel.FlxCamera;
import funkin.audio.FunkinSound;

import funkin.modding.PolymodHandler;

import funkin.play.character.SparrowCharacter;
import funkin.play.character.MultiSparrowCharacter;

import funkin.input.Cursor;

import funkin.ui.MusicBeatState;
import funkin.ui.mainmenu.MainMenuState;


import funkin.util.FileUtil;
import flixel.util.FlxSave;
import funkin.util.MathUtil;
import funkin.util.WindowUtil;
import funkin.util.ReflectUtil;
import funkin.ui.debug.charting.ChartEditorState;

import funkin.play.character.CharacterDataParser;

import funkin.graphics.FunkinSprite;

import haxe.ui.core.Screen;
import haxe.ui.core.Component;
import haxe.ui.core.TextDisplay;

import haxe.ui.components.Label;
import haxe.ui.components.Image;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.DropDown;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.ColorPicker;
import haxe.ui.components.NumberStepper;

import haxe.ui.components.pickers.MenuItemPicker;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.VBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.HorizontalSplitter;

import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;

import haxe.ui.containers.dialogs.Dialog;
import haxe.ui.containers.dialogs.MessageBox;

import haxe.ui.containers.windows.Window;
import haxe.ui.containers.windows.WindowManager;

import haxe.ui.data.ArrayDataSource;

import haxe.ui.macros.ComponentMacros;
import openfl.geom.ColorTransform;

import openfl.events.UncaughtErrorEvent;
import openfl.net.URLLoader;
import openfl.net.URLRequest;

import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;

import flixel.tweens.FlxTween;

class CharacterEditorV2 extends MusicBeatState {

	// -- Editor Info -- \\
	var editorVersion = "v0.1.0";
	var editorTitle = "Nova Character Editor REFRESHED";
	var changelog = [
		{
			version: "v0.1.0",
			changes: [
				"REFRESHED Release + Basic Editor Functionality"
			]
		}
	];
	// ----------------- \\

	// -- UI Elements \\
	var animationList; 			// Asigned to variables because caused issue
	var charName;
	var assetPath;
	var renderType;
	var singTimeStepper;
	var charFlipXCheckBox;
	var charStepperX;
	var charStepperY;
	var animName;
	var prefix;
	var indices;
	var animStepperX;
	var animStepperY;
	var charScaleStepper;
	var danceEveryStepper;
	var idTextField;
	var isPixelCheckbox;
	var iconPreview;

	var curAnim;

	var bg:FunkinSprite;

	var windowManager = new WindowManager();
	
	var characterData = [];
	var curCharacterData;
	var characterSprite;
	var onionSprite;

	var topBar;
	var bottomBar;
	var characterInfoWindow;

	var uiColor = 0xFFFFFFFF;

	var save = new FlxSave();
	

	var enableBetaFeatures = false;

	var cameraTarget = {
		x: 0,
		y: 0,
		zoom: 0.7
	}

	function new() {
		super('CharacterEditorV2');
	}

	/**
	 * Shortcut to parse a JSON string
	 * @param str JSON contents as string.
	 * @return Parsed JSON
	*/
	public function parseJsonString(str:String) {
		return Json.parse(str);
	}

	/**
	 * Shortcut to parse a JSON file
	 * @param path  Path to the JSON file
	 * @return Parsed JSON
	*/
	public function parseJsonFile(path:String) {
		var daString = FileUtil.readStringFromPath(path);
		if (daString == null || daString == "") {
			return null;
		} else {
			return parseJsonString(daString);
		}
	}

	var debugTexts = [];

	function debugPrint(text) {
		var text = new FlxText(0, 50, FlxG.width, text);
		text.visible = false;
		text.cameras = [camHUD];
		text.size = 20;
		text.alignment = 'center';
		text.borderStyle = FlxTextBorderStyle.OUTLINE;
		text.borderSize = 3;
		FlxTween.tween(text, {alpha: 0}, 3, {startDelay: 5});
		debugTexts.push(text);
		add(text);
	}

	function downloadLatestVersion() {
		trace(currentFolder);
		var loader = new URLLoader();
		debugPrint("Downloading Latest Version...");
        loader.dataFormat = 0;
		loader.addEventListener("complete", ()->{
			debugPrint("Latest Version Downloaded!");
			debugPrint("Extracting ZIP File...");
			deleteDirectory(currentFolder);
			//FileUtil.deleteDir(currentFolder);
			var bytesInput = new BytesInput(loader.data);
			var reader = new Reader(bytesInput);
			var entries = reader.read();
			for(_entry in entries) {
				var data = Reader.unzip(_entry);
				if (data + "" != "") {
					var fileName = StringTools.replace(_entry.fileName, "Nova-Character-Editor-main/", "");
					FileUtil.writeBytesToPath(currentFolder+ "/" + fileName, data);
				}
			}
			debugPrint("Reloading Mods...");
			new FlxTimer().start(0.1, ()->{
				//cancelUpdate = true;
				PolymodHandler.forceReloadAssets();
				//var targetState = ScriptedMusicBeatState.init("StageEditor");
				//FlxG.switchState(targetState);
				//FlxTransitionableState.skipNextTransIn = true;
				//FlxTransitionableState.skipNextTransOut = true;
				//targetState.scriptCall("debugPrint", ["Editor Reloaded!"]);
				debugPrint("Re-Open Editor To Apply Update");
			});
		});
		var url = "https://codeload.github.com/NebulaStellaNova/Nova-Character-Editor/zip/refs/heads/main";
		loader.load(new URLRequest(url));
	}

	var didFirstCheck;

	function checkForUpdates() {
		var loader = new URLLoader();
		loader.addEventListener("complete", ()->{
			var cloudVersion = "v" + Json.parse(loader.data).mod_version;
			trace(cloudVersion);
			if (cloudVersion == null) {
				cloudVersion = "UNKNOWN";
			}
			if (cloudVersion != editorVersion) {
				trace("New Character Editor Update Found!!");

				var updateWindow = new Window();
				updateWindow.title = "New Update Found!!";
				updateWindow.maximizable = false;
				updateWindow.minimizable = false;
				updateWindow.collapsable = false;
				updateWindow.windowManager = windowManager;
				updateWindow.width = 300;
				updateWindow.height = 192;
				

				var nameLabel = new Label();
				nameLabel.text = "New Version: " + cloudVersion + "\nCurrent Version: " + editorVersion;
				nameLabel.marginTop = 5;
				updateWindow.addComponent(nameLabel);

				var updateButton = new Button();
				updateButton.text = "Open GameBanana";
				updateButton.color = 0xFFaaaaaa;
				updateButton.marginTop = 5;
				updateButton.onClick = ()->{
					debugPrint("Uh! Ooooh... No GameBanana For Youuuuu.");
					//FlxG.openURL("https://gamebanana.com/tools/19825");
					//Ruh Roh
				}
				updateWindow.addComponent(updateButton);

				var downloadButton = new Button();
				downloadButton.text = "Download/Install Update";
				downloadButton.marginTop = 5;
				downloadButton.color = 0xFFaaaaaa;
				downloadButton.onClick = ()->{
					downloadLatestVersion();
				}
				updateWindow.addComponent(downloadButton);

				var closeButton = new Button();
				closeButton.text = "Close";
				closeButton.color = 0xFFaaaaaa;
				closeButton.marginTop = 3;
				closeButton.marginLeft = updateWindow.width - 90;
				updateWindow.addComponent(closeButton);

				updateWindow.screenCenter();
				add(updateWindow);
				FunkinSound.playOnce(Paths.sound("chartingSounds/openWindow"), 1);

				closeButton.onClick = ()->{
					windowManager.closeWindow(updateWindow);
				}
			} else if (didFirstCheck) {
				var updateWindow = new Window();
				updateWindow.title = "No Update Found.";
				updateWindow.maximizable = false;
				updateWindow.minimizable = false;
				updateWindow.collapsable = false;
				updateWindow.windowManager = windowManager;
				updateWindow.width = 300;
				updateWindow.height = 118;

				var nameLabel = new Label();
				nameLabel.text = "Your Editor is Up To Date!";
				nameLabel.marginTop = 5;
				updateWindow.addComponent(nameLabel);

				var closeButton = new Button();
				closeButton.text = "Close";
				closeButton.marginTop = 3;
				closeButton.marginLeft = updateWindow.width - 90;
				closeButton.color = 0xFFaaaaaa;
				updateWindow.addComponent(closeButton);

				updateWindow.screenCenter();
				add(updateWindow);
				FunkinSound.playOnce(Paths.sound("chartingSounds/openWindow"), 1);

				closeButton.onClick = ()->{
					windowManager.closeWindow(updateWindow);
				}
			}
			didFirstCheck = true;
			//var bitmap:BitmapData = BitmapData.fromBytes(loader.data);
			//var sprite:FunkinSprite = new FunkinSprite(10, 10).loadBitmapData(bitmap);
			//add(sprite);
			//trace(loader.data);
			//FileUtil.writeBytesToPath(".temp/test.png", loader.data);
		});
		//var reference = new FileReference();
		var url = "https://raw.githubusercontent.com/NebulaStellaNova/Nova-Character-Editor/refs/heads/main/_polymod_meta.json"; 
		loader.load(new URLRequest(url));
	}

	public function reloadAnimationList() {
		if (animationList == null) { return; }
		//animationList = new ListView();
		animationList.selectedItem = null;
		animationList.selectedItems = [];
		var data = new ArrayDataSource();
		animationList.dataSource = data;
		for (i in curCharacterData.character.animations) {
			data.add( { text: i.name } );
		}
	}
	
	function loadCharacter(characterData) {
		curCharacterData = characterData;
		reloadAnimationList();
		var character = characterData.character;
		if (charName != null){
			charName.text = character.name;
		}

		if (singTimeStepper != null) {
			singTimeStepper.pos = character.singTime;
		}

		if (assetPath != null){
			assetPath.text = StringTools.replace(character.assetPath, "characters/", "");
		}

		character.renderType = character.renderType != null ? character.renderType : "sparrow";
		
		if (renderType != null) {
			renderType.text = character.renderType;
		}

		if (charFlipXCheckBox != null) {
			charFlipXCheckBox.selected = character.flipX != null ? character.flipX : false;
		}

		if (charScaleStepper != null) {
			charScaleStepper.pos = curCharacterData.character.scale != null ? curCharacterData.character.scale : 1;
		}

		if (charStepperX != null) {
			charStepperX.pos = curCharacterData.character.offsets != null ? curCharacterData.character.offsets[0] : 0;
		}
		if (charStepperY != null) {
			charStepperY.pos = curCharacterData.character.offsets != null ? curCharacterData.character.offsets[1] : 0;
		}

		if (characterSprite != null) {
			remove(characterSprite);
		}

		if (onionSprite != null) {
			remove(onionSprite);
		}
		
		trace(characterData.id);
		
		onionSprite = CharacterDataParser.fetchCharacter(characterData.id);
		onionSprite.updateHitbox();
		onionSprite.screenCenter();
		onionSprite.alpha = 0.5;
		// characterSprite.playAnimation("idle");
		onionSprite.flipX = false;
		add(onionSprite);

		characterSprite = CharacterDataParser.fetchCharacter(characterData.id);
		characterSprite.updateHitbox();
		characterSprite.screenCenter();
		// characterSprite.playAnimation("idle");
		characterSprite.flipX = false;
		add(characterSprite);

		if (idTextField != null) {
			idTextField.text = characterSprite.getHealthIconId();
		}

		if (isPixelCheckbox != null) {
			isPixelCheckbox.selected = curCharacterData.character.healthIcon != null ? (curCharacterData.character.healthIcon.isPixel != null ? curCharacterData.character.healthIcon.isPixel : false) : false;
		}

		resetCamera();
	}

	function checkFileExists(path:String) {
		return Assets.exists(path);
	}

	function writeCharacterFile(path, jsonFile) {
		jsonFile.generatedBy = "Nova Character Editor REFRESHED " + editorVersion;
		var fileString = Json.stringify(jsonFile, null, "\t");
		FileUtil.writeStringToPath(path, fileString);
		//if (checkFileExists(path)) {
		FileUtil.deleteFile(path);
		//}
		FileUtil.writeStringToPath(path, fileString);
	}

	function saveCharacter() {
		if (!StringTools.contains(curCharacterData.path, "assets")) {
			writeCharacterFile(curCharacterData.path + "/data/characters/" + curCharacterData.fileName, curCharacterData.character);
		}
		var editWindow =  new Window();
		editWindow.maximizable = false;
		editWindow.minimizable = false;
		editWindow.collapsable = false;
		editWindow.width = 300;
		editWindow.height = 135;
		editWindow.windowManager = windowManager;
		editWindow.screenCenter();

		

		if (!StringTools.contains(curCharacterData.path, "assets")) {
			var label = new Label();
			label.text = "Successfully saved character to";
			editWindow.addComponent(label);
			var pathLabel = new Label();
			pathLabel.text = "\"" + curCharacterData.fileName + "\"";
			editWindow.addComponent(pathLabel);
			editWindow.title = "Saved Character!";
			editWindow.color = 0xFF00FF00;
		} else {
			var label = new Label();
			label.text = "Failed to save character!";
			editWindow.addComponent(label);
			var pathLabel = new Label();
			pathLabel.text = "\"assets\" is protected.";
			editWindow.addComponent(pathLabel);
			editWindow.title = "Failed to Save!";
			editWindow.color = 0xFFFF0000;
		}
		// curPropData
		var ok = new Button();
		ok.text = "OK";
		ok.marginTop = 3;
		ok.marginLeft = editWindow.width - 70;
		ok.color = editWindow.color;
		editWindow.addComponent(ok);
		
		add(editWindow);
		ok.onClick = ()->{
			windowManager.closeWindow(editWindow);
		}

		openSound();
	}

	function saveCharacterAs() {
		FileUtil.browseForSaveFile([FileUtil.FILE_FILTER_JSON], (path)->{
			trace(fixPath(path));
			writeCharacterFile(fixPath(path), curCharacterData.character);
			//FlxG.switchState(ScriptedMusicBeatState.init('CharacterEdotirV2')); // I spell very good - nebula
			FlxG.switchState(ScriptedMusicBeatState.init('CharacterEditorV2'));
		}, null, curCharacterData.fileName);
	}

	function create() {
		super.create();
		save.bind("nova-editors", "NebulaStellaNova");
		if(save.data.editorSong == null) {
			save.data.editorSong = {
				title: "Artistic Expression",
				key: "chartEditorLoop"
			}
			if(save.data.bgColor == null) {
				save.data.bgColor = 0xFFFFFFFF;
			}
		}


		
		enbaleAutoPause();
		WindowUtil.setWindowTitle("Friday Night Funkin' - Nova Character Editor");

		characterData.push({
			id: "bf",
			fileName: "bf.json",
			path: "assets",
			character: parseJsonFile("assets/data/characters/bf.json"),
			polyMeta: null
		});

		for (i in FileUtil.readDir("mods")) {
			if (FileUtil.directoryExists("mods/" + i + "/data/characters/")) {
				for (file in FileUtil.readDir("mods/" + i + "/data/characters/")) {
					if (StringTools.endsWith(file, ".json")) {
						var polyMeta = parseJsonFile("mods/" + i + "/_polymod_meta.json");
						//mods.push(polyMeta.title);
						var charFile = parseJsonFile("mods/" + i + "/data/characters/" + file);
						characterData.push({
							id: StringTools.replace(file, ".json", ""),
							fileName: file,
							path: "mods/" + i + "/",
							character: charFile,
							polyMeta: polyMeta
						});
					}
					
				}
			}
		}

		bg = new FunkinSprite(0, 0).loadGraphic(Paths.image('menuDesat'));
		bg.scrollFactor.set(0, 0);
		bg.setGraphicSize(Std.int(bg.width * 1.2));
		bg.updateHitbox();
		bg.screenCenter();
		bg.color = save.data.bgColor;
		add(bg);

		uiColor = save.data.uiColor != null ? save.data.uiColor : 0xFFFFFFFF;

		Cursor.show();
		var chartEditor = new ChartEditorState();
		
		camHUD = new FlxCamera();
		camHUD.bgColor = 0x00000000;
		FlxG.cameras.add(camHUD, false);
		
		// -- Top Bar Shit -- \\
		topBar = new MenuBar();
		topBar.width = FlxG.width;
		topBar.cameras = [camHUD];
		add(topBar);

		bottomBar = new MenuBar();
		bottomBar.y = 676;
		bottomBar.width = FlxG.width;
		bottomBar.cameras = [camHUD];
		add(bottomBar);

		charOffsetXLabel = new Label();
		charOffsetXLabel.text = 'X:' + null + '|';
		charOffsetXLabel.fontSize = 30;
		bottomBar.addComponent(charOffsetXLabel);

		//charOffsetYLabel = new Label();
		//charOffsetYLabel.text = 'Y:' + null + '|';
		//charOffsetYLabel.fontSize = 30;
		//bottomBar.addComponent(charOffsetYLabel);

		// -- File Dropdown -- \\
		fileMenu = new Menu();
		fileMenu.text = 'File'; 
		topBar.addComponent(fileMenu);

		newItem = new MenuItem();
		newItem.text = 'New';
		newItem.shortcutText = 'Ctrl + N';
		newItem.onClick = () -> {
			
		}
		fileMenu.addComponent(newItem);

		var separator = new MenuSeparator();
		fileMenu.addComponent(separator);

		openItem = new MenuItem();
		openItem.text = 'Open';
		openItem.shortcutText = 'Ctrl + O';
		openItem.onClick = () -> {

		}
		//fileMenu.addComponent(openItem);
		
		var separator = new MenuSeparator();
		fileMenu.addComponent(separator);

		saveItem = new MenuItem();
		saveItem.text = 'Save';
		saveItem.shortcutText = 'Ctrl + S';
		saveItem.onClick = () -> {
			saveCharacter();
		}
		fileMenu.addComponent(saveItem);
		
		saveAsItem = new MenuItem();
		saveAsItem.text = 'Save As';
		saveAsItem.shortcutText = 'Ctrl + Shift + S';
		saveAsItem.onClick = () -> {

		}
		fileMenu.addComponent(saveAsItem);
		
		var separator = new MenuSeparator();
		fileMenu.addComponent(separator);
		
		preferencesItem = new MenuItem();
		preferencesItem.text = 'Preferences';
		preferencesItem.onClick = () -> {
			
			openSound();

			var preferencesWindow = new Window();
			preferencesWindow.windowManager = windowManager;
			preferencesWindow.title = 'Preferences';
			preferencesWindow.width = 700;
			preferencesWindow.height = 500;
			preferencesWindow.screenCenter();
			preferencesWindow.maximizable = false;
			preferencesWindow.minimizable = false;
			preferencesWindow.collapsable = false;
			add(preferencesWindow);

			var preferenceTabs = new TabView();
			preferenceTabs.width = 665;
			preferenceTabs.height = 425;
			preferencesWindow.addComponent(preferenceTabs);

			var bgColorPickerBox = new Box();
			bgColorPickerBox.text = 'Background Color';
			preferenceTabs.addComponent(bgColorPickerBox);

			var bgColorPicker = new ColorPicker();
			bgColorPicker.currentColor = save.data.bgColor;
			bgColorPicker.width = preferenceTabs.width - 15;
			bgColorPicker.height = preferenceTabs.height - 40;
			bgColorPicker.onChange = ()->{
				bg.color = bgColorPicker.currentColor;
				save.data.bgColor = bgColorPicker.currentColor;
			}
			bgColorPickerBox.addComponent(bgColorPicker);

			var uiColorPickerBox = new Box();
			uiColorPickerBox.text = 'UI Color';
			if (enableBetaFeatures) {
				preferenceTabs.addComponent(uiColorPickerBox);
			}

			var uiColorPicker = new ColorPicker();
			uiColorPicker.currentColor = save.data.uiColor;
			uiColorPicker.width = preferenceTabs.width - 15;
			uiColorPicker.height = preferenceTabs.height - 40;
			uiColorPicker.onChange = ()->{
				uiColor = uiColorPicker.currentColor;
				save.data.uiColor = uiColorPicker.currentColor;
			}
			uiColorPickerBox.addComponent(uiColorPicker);

		}
		fileMenu.addComponent(preferencesItem);
		
		var separator = new MenuSeparator();
		fileMenu.addComponent(separator);

		exitItem = new MenuItem();
		exitItem.text = 'Exit';
		exitItem.shortcutText = 'Ctrl + Q';
		exitItem.onClick = () -> {
			disableAutoPause();
			PolymodHandler.forceReloadAssets();
			FlxG.switchState(new MainMenuState());
		}
		fileMenu.addComponent(exitItem);

		// -- Edit Dropdown -- \\
		editMenu = new Menu();
		editMenu.text = 'Edit'; 
		topBar.addComponent(editMenu);

		iconPropertiesItem = new MenuItem();
		iconPropertiesItem.text = 'Icon Info';
		iconPropertiesItem.shortcutText = '';
		iconPropertiesItem.onClick = () -> {
			iconInfowWindow();
		}
		editMenu.addComponent(iconPropertiesItem);

		charPropertiesItem = new MenuItem();
		charPropertiesItem.text = 'Character Info';
		charPropertiesItem.shortcutText = '';
		charPropertiesItem.onClick = () -> {
			fuckNebula();
		}
		editMenu.addComponent(charPropertiesItem);

		editAnimsItem = new MenuItem();
		editAnimsItem.text = "Animation Info";
		editAnimsItem.shortcutText = '';
		editAnimsItem.onClick = ()->{
			openSound();
			openAnimEditWindow();
		}
		editMenu.addComponent(editAnimsItem);      
		
		var separator = new MenuSeparator();
		fileMenu.addComponent(separator); 

		deleteAnimItem = new MenuItem();
		deleteAnimItem.text = 'Delete Current Animation';
		deleteAnimItem.shortcutText = '';
		deleteAnimItem.color = 0xFFFF0000;
		deleteAnimItem.onClick = () -> {
			openSound();
		}
		editMenu.addComponent(deleteAnimItem);       

		// -- Tools Dropdown -- \\
		toolsMenu = new Menu();
		toolsMenu.text = 'Tools'; 
		topBar.addComponent(toolsMenu);

		resetCameraItem = new MenuItem();
		resetCameraItem.text = 'Reset Camera';
		resetCameraItem.shortcutText = '';
		resetCameraItem.onClick = () -> {
			resetCamera();
		}
		toolsMenu.addComponent(resetCameraItem);

		var separator = new MenuSeparator();
		fileMenu.addComponent(separator); 

		clearAnimOffsetsItem = new MenuItem();
		clearAnimOffsetsItem.text = 'Clear Animation Offsets';
		clearAnimOffsetsItem.shortcutText = '';
		clearAnimOffsetsItem.onClick = () -> {

		}
		toolsMenu.addComponent(clearAnimOffsetsItem);


		clearAllOffsetsItem = new MenuItem();
		clearAllOffsetsItem.text = 'Clear All Animation Offsets';
		clearAllOffsetsItem.shortcutText = '';
		clearAllOffsetsItem.color = 0xFFFF0000;
		clearAllOffsetsItem.onClick = () -> {

		}
		toolsMenu.addComponent(clearAllOffsetsItem);
		
		// -- Converters Dropdown -- \\
		convertersMenu = new Menu();
		convertersMenu.text = 'Converters'; 
		topBar.addComponent(convertersMenu);
		
		psychConvertItem = new MenuItem();
		psychConvertItem.text = 'Psych to V-Slice';
		psychConvertItem.shortcutText = '';
		psychConvertItem.onClick = () -> {

		}
		convertersMenu.addComponent(psychConvertItem);
		
		codenameConvertItem = new MenuItem();
		codenameConvertItem.text = 'Codename to V-Slice';
		codenameConvertItem.shortcutText = '';
		codenameConvertItem.onClick = () -> {

		}
		convertersMenu.addComponent(codenameConvertItem);

		// -- Help Menu! -- \\
		helpItem = new Menu();
		helpItem.text = 'Help';
		helpItem.onClick = () -> {

		}
		topBar.addComponent(helpItem);
		
		userGuideItem = new MenuItem();
		userGuideItem.text = 'User Guide';
		userGuideItem.shortcutText = 'F1';
		userGuideItem.onClick = () -> {
			openUserGuide();
		}
		helpItem.addComponent(userGuideItem);
		
		checkForUpdateItem = new MenuItem();
		checkForUpdateItem.text = 'Check for Updates';
		checkForUpdateItem.shortcutText = 'Ctrl + U';
		checkForUpdateItem.onClick = checkForUpdates;
		helpItem.addComponent(checkForUpdateItem);

		var watermark = new Label();
		watermark.text = editorTitle + " " + editorVersion;
		watermark.x = FlxG.width - 282;
		watermark.y = 11;
		watermark.cameras = [camHUD];
		add(watermark);

		loadCharacter(characterData[0]);

		
		/* var fuckYouHaxeUI = new Window();
		fuckYouHaxeUI.windowManager = windowManager;
		fuckYouHaxeUI.title = "Background Color";
		fuckYouHaxeUI.x = 200;
		fuckYouHaxeUI.y = 200;
		fuckYouHaxeUI.maximizable = false;
		fuckYouHaxeUI.minimizable = false;
		fuckYouHaxeUI.collapsable = false;
		
		fuckYouHaxeUI.addComponent(bgColorPicker);
		add(fuckYouHaxeUI); */

		fuckNebula();
		openAnimEditWindow();
		iconInfowWindow();
		checkForUpdates();
	}

	function resetCamera() {
		cameraTarget.zoom = 0.7;
		cameraTarget.x = (FlxG.width/3)-(characterSprite.width/4)+40;
		cameraTarget.y = 0;
	}

	var iconWindow;

	function iconInfowWindow() {
		if (iconWindow == null || !iconWindow.visible) {
			iconWindow = new Window();
			iconWindow.windowManager = windowManager;
			iconWindow.title = 'Icon Info';
			iconWindow.cameras = [camHUD];
			iconWindow.maximizable = false;
			iconWindow.minimizable = false;
			iconWindow.collapsable = false;
			iconWindow.width = 250;
			iconWindow.height = 220;
			iconWindow.x = characterInfoWindow.x - editAnimWindow.width - 5;
			iconWindow.y = 320;
			add(iconWindow);
			
			var idBox = new HBox();
			iconWindow.addComponent(idBox);

			var idLable = new Label();
			idLable.text = 'Icon:';
			idLable.marginTop = 5;
			idBox.addComponent(idLable);

			idTextField = new TextField();
			idTextField.placeholder = 'Icon Name';
			idTextField.color = 0x00aaaaaa;
			idTextField.text = characterSprite.getHealthIconId();
			idTextField.onChange = ()->{
				if (curCharacterData.character.healthIcon == null) {
					curCharacterData.character.healthIcon = {
						id: idTextField.text,
						isPixel: false
					}
				}
				curCharacterData.character.healthIcon.id = idTextField.text;
				if (checkFileExists(Paths.image("icons/icon-" + idTextField.text))) {
					iconPreview.set_value(Paths.image("icons/icon-" + idTextField.text));
					idTextField.color = 0x00aaaaaa;
				} else {
					iconPreview.set_value(Paths.image("icons/icon-face"));
					idTextField.color = 0xFFFF0000;
				}
			}
			idBox.addComponent(idTextField);

			var isPixelBox = new HBox();
			iconWindow.addComponent(isPixelBox);

			var isPixelLabel = new Label();
			isPixelLabel.text = "Pixel:"; // first trey - nucelk
			isPixelBox.addComponent(isPixelLabel);

			isPixelCheckbox = new CheckBox();
			isPixelCheckbox.selected = curCharacterData.character.healthIcon != null ? (curCharacterData.character.healthIcon.isPixel != null ? curCharacterData.character.healthIcon.isPixel : false) : false;
			isPixelCheckbox.color = 0xFFaaaaaa;			
			isPixelCheckbox.onChange = ()->{
				if (curCharacterData.character.healthIcon == null) {
					curCharacterData.character.healthIcon = {
						id: idTextField.text,
						isPixel: false
					}
				}
				curCharacterData.character.healthIcon.isPixel = isPixelCheckbox.selected;
			}
			isPixelBox.addComponent(isPixelCheckbox);

			var iconBox = new Box();
			iconBox.color = 0xFFaaaaaa;
			iconWindow.addComponent(iconBox);

			iconPreview = new Image();
			iconPreview.set_value(Paths.image("icons/icon-bf"));
			iconPreview.width = 300/1.4;
			iconPreview.height = 150/1.4;
			iconBox.addComponent(iconPreview);
			openSound();
			
		} else {
			windowManager.closeWindow(iconWindow);
		}
	}


	function fuckNebula() {
		if (characterInfoWindow == null || !characterInfoWindow.visible) {

			openSound();
	
			characterInfoWindow = new Window();
			characterInfoWindow.cameras = [camHUD];
			characterInfoWindow.windowManager = windowManager;
			characterInfoWindow.title = "Character Info";
			characterInfoWindow.maximizable = false;
			characterInfoWindow.minimizable = false;
			characterInfoWindow.collapsable = false;
			characterInfoWindow.width = 250;
			characterInfoWindow.height = 620;
			characterInfoWindow.screenCenter();
			characterInfoWindow.x = FlxG.width - characterInfoWindow.width - 10;
			characterInfoWindow.y = 46;
			add(characterInfoWindow);
	
			characterList = new DropDown();
			characterList.text = "Pick Character";
			characterList.searchable = true;
			characterList.width = 215;
			characterList.color = 0xFFaaaaaa;
			for (i in characterData) {
				characterList.dataSource.add({text: i.character.name});
			}
			characterList.onChange = ()->{
				for (i in characterData) {
					if (i.character.name == characterList.text) {
						loadCharacter(i);
						characterList.text = "Editing: " + i.character.name;
						break;
					}
				}
			}
			characterInfoWindow.addComponent(characterList);
	
			var nameBox = new HBox();
			characterInfoWindow.addComponent(nameBox);
	
			characterNameLabel = new Label();
			characterNameLabel.text = 'Name:';
			characterNameLabel.marginTop = 5;
			nameBox.addComponent(characterNameLabel);
	
			charName = new TextField();
			charName.placeholder = 'Character';
			charName.text = curCharacterData.character.name;
			charName.color = 0xFFaaaaaa;
			charName.width = 172;
			nameBox.addComponent(charName);
	
			var assetPathBoxBox = new HBox();
			characterInfoWindow.addComponent(assetPathBoxBox);
	
			var assetPathLabel = new Label();
			assetPathLabel.text = 'Asset Path:';
			assetPathLabel.marginTop = 5;
			assetPathBoxBox.addComponent(assetPathLabel);
	
			assetPath = new TextField();
			assetPath.placeholder = '';
			assetPath.text = StringTools.replace(curCharacterData.character.assetPath, "characters/", "");
			// assetPath.marginTop = 5;
			assetPath.color = 0xFFaaaaaa;
			assetPath.width = 130;
			assetPathBoxBox.addComponent(assetPath);
	
			var renderTypeBox = new HBox();
			characterInfoWindow.addComponent(renderTypeBox);
	
			var renderTypeLabel = new Label();
			renderTypeLabel.text = 'Render Type:';
			renderTypeLabel.marginTop = 5;
			renderTypeBox.addComponent(renderTypeLabel);
	
			renderType = new TextField();
			renderType.placeholder = 'sparrow';
			renderType.text = curCharacterData.character.renderType != null ? curCharacterData.character.renderType : "sparrow";
			// assetPath.marginTop = 5;
			renderType.color = 0xFFaaaaaa;
			renderType.width = 123;
			renderTypeBox.addComponent(renderType);
	
			var charScaleBox = new HBox();
			characterInfoWindow.addComponent(charScaleBox);
	
			var charScaleLabel = new Label();
			charScaleLabel.text = 'Scale:';
			charScaleLabel.marginTop = 5;
			charScaleBox.addComponent(charScaleLabel);
	
			charScaleStepper = new NumberStepper();
			charScaleStepper.color = 0xFFaaaaaa;
			charScaleStepper.min = 0.1;
			charScaleStepper.step = 0.1;
			charScaleStepper.width = 165;
			charScaleStepper.pos = curCharacterData.character.scale != null ? curCharacterData.character.scale : 1;
			charScaleStepper.onChange = ()->{
				// NIGGER CODE BRO FUCK - genzu
				// 💀 - nebula
				charScaleStepper.pos = charScaleStepper.pos != null ? charScaleStepper.pos : 1;
				curCharacterData.character.scale = charScaleStepper.pos;
			}
			charScaleBox.addComponent(charScaleStepper);
	
			var singTimeBox = new HBox();
			characterInfoWindow.addComponent(singTimeBox);
	
			var singTimeLabel = new Label();
			singTimeLabel.text = 'Sing Time:';
			singTimeLabel.marginTop = 5;
			singTimeBox.addComponent(singTimeLabel);
	
			singTimeStepper = new NumberStepper();
			singTimeStepper.color = 0xFFaaaaaa;
			singTimeStepper.width = 138;
			singTimeStepper.pos = curCharacterData.character.singTime;
			singTimeBox.addComponent(singTimeStepper);
	
			var danceEveryBox = new HBox();
			characterInfoWindow.addComponent(danceEveryBox);
	
			var danceEveryLabel = new Label();
			danceEveryLabel.text = 'Dance Interval:';
			danceEveryLabel.marginTop = 5;
			danceEveryBox.addComponent(danceEveryLabel);
	
			danceEveryStepper = new NumberStepper();
			danceEveryStepper.color = 0xFFaaaaaa;
			danceEveryStepper.width = 103;
			danceEveryStepper.pos = curCharacterData.character.danceEvery != null ? curCharacterData.character.danceEvery : 1;
			danceEveryStepper.onChange = ()->{
				curCharacterData.character.danceEvery = danceEveryStepper.pos;
			}
			danceEveryBox.addComponent(danceEveryStepper);
	
			charOffsetsBox = new HBox();
			characterInfoWindow.addComponent(charOffsetsBox);
	
			var charOffsetLabel = new Label();
			charOffsetLabel.text = 'Offsets:';
			charOffsetLabel.marginTop = 5;
			charOffsetsBox.addComponent(charOffsetLabel);
	
			charStepperX = new NumberStepper();
			charStepperX.color = 0xFFaaaaaa;
			charStepperX.width = 65;
			charStepperX.marginLeft = 17;
			charOffsetsBox.addComponent(charStepperX);
	
			charStepperY = new NumberStepper();
			charStepperY.color = 0xFFaaaaaa;
			charStepperY.marginLeft = 17;
			charStepperY.width = 65;
			charOffsetsBox.addComponent(charStepperY);
	
			var charflipXBox = new HBox();
			charflipXBox.marginTop = -10;
			charflipXBox.marginLeft = 30;
			characterInfoWindow.addComponent(charflipXBox);
			characterInfoWindow.addComponent(charflipXBox); // Adding twice gives space between
	
			var charFlipX = new Label();
			charFlipX.text = 'Flip X:';
			charFlipX.marginTop = 5;
			charflipXBox.addComponent(charFlipX);
	
			charFlipXCheckBox = new CheckBox();
			charFlipXCheckBox.marginTop = 5;
			charFlipXCheckBox.color = 0x00aaaaaa;
			charflipXBox.addComponent(charFlipXCheckBox);
	
			var charFlipY = new Label();
			charFlipY.text = 'Flip Y:';
			charFlipY.marginTop = 5;
			charflipXBox.addComponent(charFlipY);
	
			var charFlipYCheckBox = new CheckBox();
			charFlipYCheckBox.marginTop = 5;
			charFlipYCheckBox.color = 0x00aaaaaa;	
			charflipXBox.addComponent(charFlipYCheckBox);
	
			var splitter = new HorizontalSplitter();
			characterInfoWindow.addComponent(splitter);
	
			var animLabel = new Label();
			animLabel.text = 'Animations';
			animLabel.marginTop = 8;
			characterInfoWindow.addComponent(animLabel);
	
			animationList = new ListView();
			animationList.onChange = ()->{
				if (FlxG.keys.pressed.CONTROL) {
					onionSprite.playAnimation(animationList.selectedItem.text, true);
					characterSprite.playAnimation(animationList.selectedItem.text, true);
				} else {
					characterSprite.playAnimation(animationList.selectedItem.text, true);
				}
				var curAnim;
				for (i in curCharacterData.character.animations) {
					if (i.name == animationList.selectedItem.text) {
						curAnim = i;
					}
				}
				if (animName != null) {
					animName.text = curAnim.name;
				}
				if (prefix != null) {
					prefix.text = curAnim.prefix;
				}
				if (indices != null) {
					//indices.text = curAnim.indices;
				}
				if (animStepperX != null) {
					animStepperX.pos = curAnim.offsets != null ? curAnim.offsets[0] : 0;
				}
				if (animStepperY != null) {
					animStepperY.pos = curAnim.offsets != null ? curAnim.offsets[1] : 0;
				}
				// prefix.text = animationList.selectedItem.text;
			}
			animationList.width = 215;
			animationList.height = 175;
			animationList.marginTop = 5;
			characterInfoWindow.addComponent(animationList);
	
			var editButtonBox = new HBox();
			characterInfoWindow.addComponent(editButtonBox);
			
			var animEditButton = new Button();
			animEditButton.text = 'Edit Animation';
			animEditButton.marginTop = 5;
			animEditButton.width = 215;
			animEditButton.color = 0xFFaaaaaa;
			animEditButton.onClick = ()->{
				openSound();
				openAnimEditWindow();
			}
			editButtonBox.addComponent(animEditButton);
	
			var createDeleteButtonBox = new HBox();
			characterInfoWindow.addComponent(createDeleteButtonBox);
	
			var createAnimButton = new Button();
			createAnimButton.width = 105;
			createAnimButton.marginTop = 5;
			createAnimButton.text = 'New Anim';
			createAnimButton.color = 0xFFaaaaaa;
			createDeleteButtonBox.addComponent(createAnimButton);
	
			var deleteAnimButton = new Button();
			deleteAnimButton.width = 105;
			deleteAnimButton.marginTop = 5;
			deleteAnimButton.text = 'Delete Anim';
			deleteAnimButton.color = 0xFFaaaaaa;
			deleteAnimButton.onClick = ()->{
				for (anim in curCharacterData.character.animations) {
					if (anim.name == characterSprite.animation.name) {
						curCharacterData.character.animations.remove(anim);
						reloadAnimationList();
					}
				}
			}
			createDeleteButtonBox.addComponent(deleteAnimButton);
	
			reloadAnimationList();
			
		} else {
			windowManager.closeWindow(characterInfoWindow);
		}
		
	}

	var editAnimWindow;

	function openAnimEditWindow() {
		var curAnim;
		for (i in curCharacterData.character.animations) {
			if (i.name == characterSprite.animation.name) {
				curAnim = i;
			}
		}
		
		if (editAnimWindow == null || !editAnimWindow.visible) {

			editAnimWindow = new Window();
			editAnimWindow.cameras = [camHUD];
			editAnimWindow.windowManager = windowManager;
			editAnimWindow.title = "Animation Info";
			editAnimWindow.maximizable = false;
			editAnimWindow.minimizable = false;
			editAnimWindow.collapsable = false;
			// editAnimWindow.color = 0xFFFFFF00;
			editAnimWindow.width = 250;
			editAnimWindow.height = 270;
			editAnimWindow.screenCenter();
			editAnimWindow.x = characterInfoWindow.x - editAnimWindow.width - 5;
			editWindowStartX = editAnimWindow.x;
			editAnimWindow.y = 46;
			add(editAnimWindow);

			animNameBox = new HBox();
			editAnimWindow.addComponent(animNameBox);

			var ainmNameLabel = new Label();
			ainmNameLabel.text = 'Name:';
			ainmNameLabel.marginTop = 5;
			animNameBox.addComponent(ainmNameLabel);

			// characterSprite.animation.name
			animName = new TextField();
			animName.placeholder = "Animation Name";
			animName.text = characterSprite.animation.name;
			animName.width =  175;
			animName.color = 0xFFaaaaaa;
			animNameBox.addComponent(animName);

			prefixBox = new HBox();
			editAnimWindow.addComponent(prefixBox);

			var prefixLabel = new Label();
			prefixLabel.text = 'Prefix:';
			prefixLabel.marginTop = 5;
			prefixBox.addComponent(prefixLabel);

			prefix = new TextField();
			prefix.placeholder = "None";
			prefix.width =  161;
			prefix.color = 0xFFaaaaaa;
			prefix.onChange = ()->{
				// prefix.text = 'abcd';
			}
			prefixBox.addComponent(prefix);
			
			indicesBox = new HBox();
			editAnimWindow.addComponent(indicesBox);

			var indicesLabel = new Label();
			indicesLabel.text = 'Indices:';
			indicesLabel.marginTop = 5;
			indicesBox.addComponent(indicesLabel);

			indices = new TextField();
			indices.placeholder = "Coming Soon";
			indices.width =  154;
			indices.color = 0xFFaaaaaa;
			indices.onChange = ()->{
				/* if (indices.text != "") {
					curAnim.indices = [];
					for (i in indices.text.split(",")) {
						curAnim.indices.push(Std.parseInt(i));
					}
				} else {
					curAnim.frameIndices = null;
				} */
			}
			indicesBox.addComponent(indices);

			animOffsetsBox = new HBox();
			editAnimWindow.addComponent(animOffsetsBox);

			var aninOffsetLabel = new Label();
			aninOffsetLabel.text = 'Offsets:';
			aninOffsetLabel.marginTop = 5;
			animOffsetsBox.addComponent(aninOffsetLabel);

			animStepperX = new NumberStepper();
			animStepperX.color = 0xFFaaaaaa;
			animStepperX.width = 65;
			animStepperX.marginLeft = 20;
			animStepperX.onChange = ()->{
				for (i in curCharacterData.character.animations) {
					if (i.name == characterSprite.animation.name) {
						i.offsets[0] = animStepperX.pos;
					}
				}
			}
			animOffsetsBox.addComponent(animStepperX);

			animStepperY = new NumberStepper();
			animStepperY.color = 0xFFaaaaaa;
			animStepperY.marginLeft = 20;
			animStepperY.width = 65;
			animStepperY.onChange = ()->{
				for (i in curCharacterData.character.animations) {
					if (i.name == characterSprite.animation.name) {
						i.offsets[1] = animStepperY.pos;
					}
				}
			}
			animOffsetsBox.addComponent(animStepperY);

			var animAssetPathBoxBox = new HBox();
			editAnimWindow.addComponent(animAssetPathBoxBox);

			var animAssetPathLabel = new Label();
			animAssetPathLabel.text = 'Asset Path:';
			animAssetPathLabel.marginTop = 5;
			animAssetPathBoxBox.addComponent(animAssetPathLabel);

			animAssetPath = new TextField();
			animAssetPath.placeholder = 'None';
			// assetPath.marginTop = 5;
			animAssetPath.color = 0xFFaaaaaa;
			animAssetPath.width = 135;
			animAssetPathBoxBox.addComponent(animAssetPath);

			var animflipXBox = new HBox();
			animflipXBox.marginTop = 0;
			animflipXBox.marginLeft = 30;
			editAnimWindow.addComponent(animflipXBox);

			var animFlipX = new Label();
			animFlipX.text = 'Flip X:';
			animFlipX.marginTop = 5;
			animflipXBox.addComponent(animFlipX);

			var animFlipXCheckBox = new CheckBox();
			animFlipXCheckBox.marginTop = 5;
			animFlipXCheckBox.color = 0xFFaaaaaa;
			animflipXBox.addComponent(animFlipXCheckBox);

			var animFlipY = new Label();
			animFlipY.text = 'Flip Y:';
			animFlipY.marginTop = 5;
			animflipXBox.addComponent(animFlipY);

			var animFlipYCheckBox = new CheckBox();
			animFlipYCheckBox.marginTop = 5;
			animFlipYCheckBox.color = 0xFFaaaaaa;
			animflipXBox.addComponent(animFlipYCheckBox);

			var loopBox = new HBox();
			loopBox.marginLeft = 75;
			editAnimWindow.addComponent(loopBox);

			var loopLabel = new Label();
			loopLabel.text = 'Looped:';
			loopLabel.marginTop = 5;
			loopBox.addComponent(loopLabel);

			var loopCheckBox = new CheckBox();
			loopCheckBox.marginTop = 5;
			loopCheckBox.color = 0xFFaaaaaa;
			loopBox.addComponent(loopCheckBox);
		} else {
			windowManager.closeWindow(editAnimWindow);
		}
	}

	var helpWindow;
	// v Fuck YOU. v \\

	function openUserGuide() {
		if (helpWindow == null || !helpWindow.visible) {
			openSound();
	
			helpWindow = new Window();
			helpWindow.title = 'Help';
			helpWindow.windowManager = windowManager;
			helpWindow.y = 100;
			helpWindow.x = 100;
			helpWindow.width = 500;
			helpWindow.height = 600;
			helpWindow.screenCenter();
			helpWindow.maximizable = false;
			helpWindow.minimizable = false;
			helpWindow.collapsable = false;
			add(helpWindow);
	
			var helpTabs = new TabView();
			helpTabs.width = 465;
			helpTabs.height = 525;
	
			var helpTabBarGuide = new Box();
			helpTabBarGuide.text = 'Guide';
			helpTabs.addComponent(helpTabBarGuide);
	
			var guideLabel = new Label();
			guideLabel.width = helpTabs.width;
			guideLabel.text = "So you decided you can't figure out anything... well that makes two of us!\n\n" + 
			"Saldy not much is here at the moment so how about you take a look at the two other tabs to pass the time! You might learn a thing or two!" + 
			"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + 
			"to be changed.";
			helpTabBarGuide.addComponent(guideLabel);
	
			var helpTabBarShortcuts = new Box();
			helpTabBarShortcuts.text = 'Keybind';
			helpTabs.addComponent(helpTabBarShortcuts);
	
			helpTabelView = new TableView();
			helpTabelView.height = helpTabs.height - 45;
			helpTabBarShortcuts.addComponent(helpTabelView);
	
			var helpHeader = new Header();
			helpTabelView.addComponent(helpHeader);
	
			var actionColumn = new Column();
			actionColumn.text = 'Action';
			actionColumn.width = (helpTabs.width/2) - 9;
			helpHeader.addComponent(actionColumn);
			
			var keybindColumn = new Column();
			keybindColumn.text = 'Keybind';
			keybindColumn.width = (helpTabs.width/2) - 9;
			helpHeader.addComponent(keybindColumn);
	
			var keybindText = new ListView();
			keybindText.marginTop = 25;
			keybindText.allowInteraction = false;
			keybindText.width = helpTabs.width - 16;
			keybindText.onChange = ()->{
				keybindText.selectedItem = null;
				keybindText.selectedItems = [];
			}
			
			keybindText.dataSource.add( {text: "Show User Guide                 F1"} );
			//keybindText.dataSource.add( {text: "Open Stage                      Ctrl + O"} );
			keybindText.dataSource.add( {text: "New Stage                       Ctrl + N"} );
			keybindText.dataSource.add( {text: "Save                            Ctrl + S"} );
			keybindText.dataSource.add( {text: "Save As                         Ctrl + Shift + S"} );
			//keybindText.dataSource.add( {text: "Reset Camera Position           Ctrl + R"} );
			keybindText.dataSource.add( {text: "Check For Updates               Ctrl + U"} );
			keybindText.dataSource.add( {text: "Reset Camera Zoom               Ctrl + Shift + R"} );
			//keybindText.dataSource.add( {text: "Create/Add Prop                 Ctrl + A"} );
			keybindText.dataSource.add( {text: "Deleted Selected Animation      Delete"} );
			keybindText.dataSource.add( {text: "Exit                            Ctrl + Q"} );
			keybindText.dataSource.add( {text: "                    -- Editor Controls --"} );
			keybindText.dataSource.add( {text: "Move Camera                     W, A, S, D, Left Click + Drag"} );
			keybindText.dataSource.add( {text: "Zoom Camera                     Q, E, Mouse Wheel"} );
			helpTabBarShortcuts.addComponent(keybindText);
	
			var helpTabExtra = new ScrollView();
			helpTabExtra.text = 'Change Log';
			helpTabExtra.contentWidth = helpTabs.width - 30;
			helpTabExtra.isScrollableHorizontally = false;
			helpTabExtra.width = helpTabs.width - 16;
			helpTabExtra.height = helpTabs.height - 42;
			helpTabs.addComponent(helpTabExtra);
	
			var changelogText = new Label();
			changelogText.width = helpTabs.width;
			changelogText.text = editorTitle + " " + editorVersion +
			"\nChange Log:\n";
			for (i in changelog) {
				changelogText.text += "\n" + i.version + "\n";
				for (change in i.changes) {
					changelogText.text += change + "\n";
				}
			}
			helpTabExtra.addComponent(changelogText);
	
			var creditsTab = new Box();
			creditsTab.text = 'Credits';
			helpTabs.addComponent(creditsTab);
	
			var creditsLabel = new Label();
			creditsLabel.width = helpTabs.width;
			creditsLabel.text = "Credits:";
			creditsTab.addComponent(creditsLabel);
	
			var creditsList = new ListView();
			creditsList.marginTop = 25;
			creditsList.allowInteraction = false;
			creditsList.width = helpTabs.width - 16;
	
			creditsList.dataSource.add( {text: "Nebula S. Nova                  Main Coder, Lofi Freaky Menu"} );
			creditsList.dataSource.add( {text: "GENZU                           Coded The \"Help\" Window"} );
			
			creditsTab.addComponent(creditsList);
	
			var todoTab = new Box();
			todoTab.text = 'To-Do';
			//helpTabs.addComponent(todoTab);
	
			var todoLabel = new Label(); // Copy pasted LOL 🤓☝️ - nebula
			todoLabel.width = helpTabs.width;
			var lines = [
				"To-Do:", 
				"",
				"-- Additions --",
				"",
				"",
				"--   Fixes   --",
				""
			];
			for (i in lines) {
				todoLabel.text += i + "\n";
				todoLabel.text = StringTools.replace(todoLabel.text, "null", "");
			}
			todoTab.addComponent(todoLabel);
	
			var discordTab = new VBox();
			discordTab.text = 'Discord';
			helpTabs.addComponent(discordTab);
	
	
			var novaEditorServer = new Label();
			novaEditorServer.text = "Nova Editor Server:\nhttps://discord.gg/MTMRYc63Dj";
			discordTab.addComponent(novaEditorServer);
	
			var launchNovaServer = new Button();
			launchNovaServer.text = "Join Server"; 
			launchNovaServer.allowInteraction = true;
			launchNovaServer.onClick = ()->{
				FlxG.openURL("https://discord.gg/MTMRYc63Dj");
			}
			//launchNovaServer.marginTop = 35;
			discordTab.addComponent(launchNovaServer);
	
			var vSliceNetworkServer = new Label();
			vSliceNetworkServer.text = "\nV-Slice Network:\nhttps://discord.gg/6ja4A7qtJc";
			discordTab.addComponent(vSliceNetworkServer);
	
			var launchVSliceServer = new Button();
			launchVSliceServer.text = "Join Server"; 
			launchVSliceServer.allowInteraction = true;
			launchVSliceServer.onClick = ()->{
				FlxG.openURL("https://discord.gg/6ja4A7qtJc");
			}
			//launchNovaServer.marginTop = 35;
			discordTab.addComponent(launchVSliceServer);
	
			var thanksLabel = new Label();
			thanksLabel.text = "\n\nHUGE Thanks To V-Slice Network for providing tips when I was \ncoding this.\n- Nebula S. Nova";
			discordTab.addComponent(thanksLabel);
						
			helpWindow.addComponent(helpTabs);
		} else {
			windowManager.closeWindow(helpWindow);
		}
	}

	function openSound() {
		FunkinSound.playOnce(Paths.sound("chartingSounds/openWindow"), 1);
	}

	function darkenColor(color:Int, factor:Float) {
		factor = Math.max(0, Math.min(1, factor));

		var a = (color >> 24) & 0xFF;
		var r = (color >> 16) & 0xFF;
		var g = (color >> 8) & 0xFF;
		var b = color & 0xFF;

		r = Std.int(r * factor);
		g = Std.int(g * factor);
		b = Std.int(b * factor);

		return (a << 24) | (r << 16) | (g << 8) | b;
	}


	function childCheck(parent) {
		if (parent._children != null) {
			for (child in parent._children) {
				var childClassArray = ReflectUtil.getClassNameOf(child).split(".");
				var theChildClass = childClassArray[childClassArray.length-1];
				//trace(theChildClass);
				var interactables = ["TextField", "CheckBox", "NumberStepper", "DropDown", "ListView", "Button"];
				var blackList = ["FunkinSprite", "ScriptedSparrowCharacter", "ScriptedMultiSparrowCharacter", "ScriptedAnimateAtlasCharacter", "ColorPicker", "Label"];
				if (interactables.contains(theChildClass) && !blackList.contains(theChildClass)) {
					child.colorTransform = new ColorTransform();
					child.colorTransform.blueMultiplier = 0.1;
					child.colorTransform.redMultiplier = 0.1;
					child.colorTransform.greenMultiplier = 0.1;
				} else if (blackList.contains(theChildClass)) {
					//var daAlpha = ReflectUtil.copy(child.alpha);
					//child.color = 0xFFFFFFFF;
					//child.alpha = daAlpha;
				}
				childCheck(child);
			}
			//trace("has children");
		}
	}

	function update(event) {
		super.update(event);
		get_conductorInUse().update();

		var debugIndex = 0;
		var offset = 0;
		for (i in debugTexts) {
			i.visible = true;
			if (i.alpha == 0) {
				debugTexts.remove(i);
			} else {
				var daIndex = (debugTexts.length-1)-debugIndex;
				i.y = 40 + (30*(daIndex-offset));
			}
			debugIndex++;
		}

		if (FlxG.keys.justPressed.F1) {
			openUserGuide();
		}

		if (FlxG.keys.justPressed.S && FlxG.keys.pressed.CONTROL) {
			if (FlxG.keys.pressed.SHIFT) {
				saveCharacterAs();
			} else {
				saveCharacter();
			}
		}

		if (FlxG.keys.pressed.CONTROL) {
			if (FlxG.keys.justPressed.U){
				checkForUpdates();
			}
			if (FlxG.keys.justPressed.Q){
				FlxG.switchState(new MainMenuState());
			}
			if (FlxG.keys.justPressed.R && FlxG.keys.pressed.SHIFT) {
				resetCamera();
			}
		}


		if (animationList != null) {
			animationList.focus = false;
		}
		
		for (i in members) {
			var blackList = ["FunkinSprite", "ScriptedSparrowCharacter", "ScriptedMultiSparrowCharacter", "ScriptedAnimateAtlasCharacter", "Box", "Label"];
			var classArray = ReflectUtil.getClassNameOf(i).split(".");
			var theClass = classArray[classArray.length-1];
			if (!blackList.contains(theClass)) {
				if (enableBetaFeatures) {
					i.color = uiColor;
					childCheck(i);
				}
			}
		}

		if (charStepperX != null) { // Bro fuck me. - nebula
			/* curCharacterData.character.offsets[0] = charStepperX.pos;
			curCharacterData.character.offsets[1] = charStepperY.pos; */
			/* characterSprite.globalOffsets[0] = curCharacterData.character.offsets[0] != null ? curCharacterData.character.offsets[0] : 0;
			characterSprite.globalOffsets[1] = curCharacterData.character.offsets[1] != null ? curCharacterData.character.offsets[1] : 0; */
		}

		// so why does your code not work? - genzu

		for (i in curCharacterData.character.animations) {
			if (i.name == characterSprite.animation.name) {
				if (FlxG.keys.justPressed.LEFT) {
					i.offsets[0] -= (FlxG.keys.pressed.SHIFT ? 10 : 1) * (!i.flipX ? -1 : 1);
				}
				if (FlxG.keys.justPressed.RIGHT) {
					i.offsets[0] += (FlxG.keys.pressed.SHIFT ? 10 : 1) * (!i.flipX ? -1 : 1);
				}
				if (FlxG.keys.justPressed.UP) {
					i.offsets[1] -= (FlxG.keys.pressed.SHIFT ? 10 : 1) * (!i.flipY ? -1 : 1);
				}
				if (FlxG.keys.justPressed.DOWN) {
					i.offsets[1] += (FlxG.keys.pressed.SHIFT ? 10 : 1) * (!i.flipY ? -1 : 1);
				}
				
				charOffsetXLabel.text = 'Offset X: ' + i.offsets[0] + ' | Offset Y: ' + i.offsets[1];

				characterSprite.animationOffsets[i.name][0] = i.offsets[0];
				characterSprite.animationOffsets[i.name][1] = i.offsets[1];

				onionSprite.animationOffsets[i.name][0] = i.offsets[0];
				onionSprite.animationOffsets[i.name][1] = i.offsets[1];
				
			}
		}

		if (characterSprite != null) {
			var daScale = curCharacterData.character.scale != null ? curCharacterData.character.scale : 1;
			characterSprite.scale.set(daScale, daScale);
			onionSprite.scale.set(daScale, daScale);
			// n-word - genzu
		}

		if (curCharacterData.character.healthIcon != null) {
			//idTextField.text = characterSprite.getHealthIconId();
			// erm idk lmao
		}

		if (FlxG.keys.justPressed.SPACE) {
            characterSprite.playAnimation(characterSprite.animation.name, true);
        }

		FlxG.camera.scroll.x = MathUtil.coolLerp(FlxG.camera.scroll.x, cameraTarget.x, 0.1);
		FlxG.camera.scroll.y = MathUtil.coolLerp(FlxG.camera.scroll.y, cameraTarget.y, 0.1);
		FlxG.camera.zoom = MathUtil.coolLerp(FlxG.camera.zoom, cameraTarget.zoom, 0.1);

		bg.scale.set(1/FlxG.camera.zoom, 1/FlxG.camera.zoom);

		var shiftAmount = FlxG.keys.pressed.SHIFT ? 15 : 5;

		if (FlxG.keys.pressed.A) {
			cameraTarget.x -= shiftAmount;
		} else if (FlxG.keys.pressed.D) {
			cameraTarget.x += shiftAmount;
		}

		var directionKeys = [
			FlxG.keys.justPressed.J,
			FlxG.keys.justPressed.K,
			FlxG.keys.justPressed.I,
			FlxG.keys.justPressed.L,
			FlxG.keys.justPressed.Z
		];
		var directionAnims = [
			"singLEFT",
			"singDOWN",
			"singUP",
			"singRIGHT",
			"idle"
		];
		var index = 0;
		for (i in directionKeys) {
			if (i) {
				for (dir in curCharacterData.character.animations) {
					if (dir.name == directionAnims[index]) {
						if (FlxG.keys.pressed.CONTROL) {
							onionSprite.playAnimation(directionAnims[index] + (FlxG.keys.pressed.SHIFT ? "-alt" : ""), true);
						} else {
							characterSprite.playAnimation(directionAnims[index] + (FlxG.keys.pressed.SHIFT ? "-alt" : ""), true);
						}
					}
				}
			}
			index++;
		}

		if (characterSprite != null) {
			//if (!FlxG.mouse.overlaps(characterSprite)) {
				if (FlxG.mouse.pressed) {
					cameraTarget.x -= FlxG.mouse.deltaX/FlxG.camera.zoom;
					cameraTarget.y -= FlxG.mouse.deltaY/FlxG.camera.zoom;
				}
				
			//} else {
				
			//}
		}

		if (FlxG.keys.pressed.W) {
			cameraTarget.y -= shiftAmount;
		} else if (FlxG.keys.pressed.S) {
			cameraTarget.y += shiftAmount;
		}

		if (FlxG.keys.pressed.Q) {
			cameraTarget.zoom -= shiftAmount/1000;
		} else if (FlxG.keys.pressed.E) {
			cameraTarget.zoom += shiftAmount/1000;
		}
		cameraTarget.zoom += FlxG.mouse.wheel/10;
		if (cameraTarget.zoom < 0.01) {
			cameraTarget.zoom = 0.01;
		}

		

		if (editAnimWindow != null) {
			editAnimWindow.x = characterInfoWindow.x - editAnimWindow.width - 5;
			editAnimWindow.y = 46;
			editAnimWindow.width = 250;
			editAnimWindow.height = 270;
			characterInfoWindow.x = FlxG.width - characterInfoWindow.width - 10;
			characterInfoWindow.y = 46;
			characterInfoWindow.width = 250;
			characterInfoWindow.height = 620;
		}
	}

	override function beatHit() {
		super.beatHit();
		var curBeat = get_conductorInUse().currentBeat;

		if (curBeat % curCharacterData.character.danceEvery*2 == 0) {
			if (characterSprite.animation != null) {
				if (characterSprite.animation.exists('idle') && curCharacterData.character.animations["idle"].name == "idle") {
					if (characterSprite.animation.name == "idle" && !characterSprite.animation.curAnim.looped) {
								characterSprite.animation.play("idle", true);
					}
				}
			}
		}
	}
	
	override function stepHit() {
		super.stepHit();
		var curStep = get_conductorInUse().currentStep;
	}

	function enbaleAutoPause() {
		FlxG.autoPause = false;
	}

	function disableAutoPause() {
		FlxG.autoPause = true;
	}

	function destroy() {
		super.destroy();
		WindowUtil.setWindowTitle("Friday Night Funkin'");
	}

}